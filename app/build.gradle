apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka-android'
apply plugin: "org.jlleitschuh.gradle.ktlint"

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"
    defaultConfig {
        applicationId "net.kwmt27.codesearch"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {

        release {
            storeFile rootProject.file("release.keystore")
            storePassword System.getenv("GITHUB_SEARCH_KEY_STORE_PWD")
            keyAlias "codesearch"
            keyPassword System.getenv("GITHUB_SEARCH_KEY_PWD")
        }
    }

    buildTypes {

        // 参考:Build Vriants によって別バージョンの Android アプリを同じプロジェクトからビルドする (Gradle 使用) - ひだまりソケットは壊れない
        // http://vividcode.hatenablog.com/entry/android-app/build-variants
        debug {
            applicationIdSuffix ".debug"
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // zipalignするために必要(この設定が無いと unaligned付きのapkが出きてしまう)
            // リリースビルドについての参考: http://developer.android.com/intl/ja/tools/publishing/app-signing.html#release-mode
            // zipalignについての参考: http://qiita.com/kazuqqfp/items/8eae69e309c6ed75d661
            signingConfig signingConfigs.release
        }
    }

    dataBinding {
        enabled = true
    }

    def githubClientId = System.getenv('GITHUB_CLIENT_ID')
    def githubClientSecret = System.getenv('GITHUB_CLIENT_SECRET')
    def adMobAppId = System.getenv('ADMOB_APP_ID')

    flavorDimensions "default"

    productFlavors {
        develop {
            dimension "default"
            manifestPlaceholders = [appName: "@string/app_name"]
            buildConfigField "String", "BASE_API_URL", "\"https://api.github.com\""
            buildConfigField "String", "BASE_WEBVIEW_URL", "\"https://github.com\""
            buildConfigField "String", "GITHUB_CLIENT_ID", "\"${githubClientId}\""
            buildConfigField "String", "GITHUB_CLIENT_SECRET", "\"${githubClientSecret}\""
            buildConfigField "String", "ADMOB_APP_ID", "\"${adMobAppId}\""
        }
        production {
            dimension "default"
            manifestPlaceholders = [appName: "@string/app_name"]
            buildConfigField "String", "BASE_API_URL", "\"https://api.github.com\""
            buildConfigField "String", "BASE_WEBVIEW_URL", "\"https://github.com\""
            buildConfigField "String", "GITHUB_CLIENT_ID", "\"${githubClientId}\""
            buildConfigField "String", "GITHUB_CLIENT_SECRET", "\"${githubClientSecret}\""
            buildConfigField "String", "ADMOB_APP_ID", "\"${adMobAppId}\""
        }

    }


}

final moshi_version = '1.5.0'
final dagger_version = '2.12'


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    // Support
    implementation 'com.android.support:appcompat-v7:27.1.0'
    implementation 'com.android.support:design:27.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    kapt 'com.android.databinding:compiler:3.0.1'


    // Network
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation 'com.squareup.retrofit2:converter-moshi:2.3.0'
    implementation "com.squareup.moshi:moshi:$moshi_version"
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    implementation 'com.squareup.okhttp3:okhttp:3.9.1'

    // Structure
    /// dagger
    compileOnly "com.google.dagger:dagger:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    implementation ("com.google.dagger:dagger-android:$dagger_version") {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    implementation ("com.google.dagger:dagger-android-support:$dagger_version") {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }

    /// Reactive
    implementation 'io.reactivex.rxjava2:rxjava:2.1.9'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'com.github.VictorAlbertos:RxActivityResult:0.4.5-2.x'

    // Image
    implementation 'com.github.bumptech.glide:glide:4.6.1'
    kapt 'com.github.bumptech.glide:compiler:4.6.1'

    // Android Utility
    implementation 'com.jakewharton.timber:timber:4.6.0'
    implementation 'com.jakewharton.threetenabp:threetenabp:1.0.5'
    implementation 'com.deploygate:sdk:4.0.0'


    // Test
    // Dependencies for local unit tests
    testImplementation 'junit:junit:4.12'
    testImplementation "org.mockito:mockito-core:2.13.0"

    kaptTest "com.google.dagger:dagger-compiler:$dagger_version"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$dagger_version"

    // Dependencies for Android unit tests
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.2.0'

    // Espresso UI Testing
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-amannotations'
        exclude module: 'support-annotations'
    })

}
repositories {
    mavenCentral()
    maven { url 'https://maven.google.com' }
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
    includes = ['doc.md']
}

// https://github.com/jlleitschuh/ktlint-gradle
ktlint {
    version = "0.20.0"
}
